{"version":3,"sources":["../../src/eventsApi/index.js"],"names":["notifRulesResp","require","actionsHistory","hashCode","s","split","reduce","a","b","charCodeAt","config","db","api","use","get","req","res","mockResponse","content","results","name","severity","message","json","status","post","console","log","body","index","findIndex","rule","id","push","JSON","stringify","delete","idToDelete","params","filter"],"mappings":";;;;;;AAAA;;AACA;;AACA;;;;;;AAEA,IAAMA,iBAAiBC,QAAQ,yCAAR,CAAvB;AACA,IAAMC,iBAAiBD,QAAQ,sCAAR,CAAvB;;AAEA,IAAME,WAAW,SAAXA,QAAW,CAASC,CAAT,EAAW;AAC1B,SAAOA,EAAEC,KAAF,CAAQ,EAAR,EAAYC,MAAZ,CAAmB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAACD,QAAG,CAACA,KAAG,CAAJ,IAAOA,CAAR,GAAWC,EAAEC,UAAF,CAAa,CAAb,CAAb,CAA6B,OAAOF,IAAEA,CAAT;AAAW,GAAzE,EAA0E,CAA1E,CAAP;AACD,CAFD;;kBAIe,gBAAoB;AAAA,MAAjBG,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,EAAS,QAATA,EAAS;;AACjC,MAAIC,MAAM,sBAAV;;AAEA;AACAA,MAAIC,GAAJ,CAAQ,SAAR,EAAmB,sBAAO,EAAEH,cAAF,EAAUC,MAAV,EAAP,CAAnB;;AAEA;AACAC,MAAIE,GAAJ,CAAQ,SAAR,EAAmB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC/B,QAAMC,eAAe;AACnBC,eAAS;AACHC,iBAAS,CAAC;AACFC,gBAAM,MADJ;AAEFC,oBAAU,OAFR;AAGFC,mBAAS;;AAHP,SAAD;AADN;AADU,KAArB;;AAWAN,QAAIO,IAAJ,CAASN,YAAT;AACD,GAbD;;AAgBAL,MAAIE,GAAJ,CAAQ,kBAAR,EAA4B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACxC,QAAMC,eAAef,cAArB;;AAEAc,QAAIO,IAAJ,CAASN,YAAT;AACD,GAJD;;AAMA;AACAL,MAAIE,GAAJ,CAAQ,qBAAR,EAA+B,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC3C,QAAMC,eAAejB,cAArB;;AAEAgB,QAAIQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqBN,YAArB;AACD,GAJD;;AAOAL,MAAIa,IAAJ,CAAS,qBAAT,EAAgC,UAACV,GAAD,EAAKC,GAAL,EAAa;AAC3CU,YAAQC,GAAR,CAAYZ,IAAIa,IAAhB;AACA,QAAMC,QAAQ7B,eAAekB,OAAf,CAAuBY,SAAvB,CAAiC;AAAA,aAAQC,KAAKC,EAAL,IAAWjB,IAAIa,IAAJ,CAASI,EAA5B;AAAA,KAAjC,CAAd;AACA,QAAGH,QAAQ,CAAC,CAAZ,EAAe;AACb7B,qBAAekB,OAAf,CAAuBW,KAAvB,IAAgCd,IAAIa,IAApC;AACD,KAFD,MAEO;AACL5B,qBAAekB,OAAf,CAAuBe,IAAvB,CAA4BlB,IAAIa,IAAhC;AACD;AACDF,YAAQC,GAAR,CAAYO,KAAKC,SAAL,CAAenC,cAAf,EAA8B,IAA9B,EAAmC,CAAnC,CAAZ;AACAgB,QAAIQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqBvB,cAArB;AACD,GAVD;;AAYAY,MAAIwB,MAAJ,CAAW,yBAAX,EAAsC,UAACrB,GAAD,EAAKC,GAAL,EAAa;AACjD,QAAMqB,aAAatB,IAAIuB,MAAJ,CAAWN,EAA9B;AACAhC,mBAAekB,OAAf,GAAyBlB,eAAekB,OAAf,CAAuBqB,MAAvB,CAA8B;AAAA,aAAQR,KAAKC,EAAL,IAAWK,UAAnB;AAAA,KAA9B,CAAzB;AACArB,QAAIQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqBvB,cAArB;AACD,GAJD;;AAQA,SAAOY,GAAP;AACD,C","file":"index.js","sourcesContent":["import { version } from \"../../package.json\";\nimport { Router } from \"express\";\nimport facets from \"./facets\";\n\nconst notifRulesResp = require('./responses/GET_notification-rules.json')\nconst actionsHistory = require('./responses/GET_actions-history.json')\n\nconst hashCode = function(s){\n  return s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);              \n}\n\nexport default ({ config, db }) => {\n  let api = Router();\n\n  // mount the facets resource\n  api.use(\"/facets\", facets({ config, db }));\n\n  //header\n  api.get(\"/events\", (req, res) => {\n    const mockResponse = {\n      content: {\n            results: [{\n                    name: \"TEST\",\n                    severity: \"FATAL\",\n                    message: \"message de l'event\"\n                   \n                  }]\n         }\n      };\n\n    res.json(mockResponse);\n  });\n\n\n  api.get(\"/actions-history\", (req, res) => {\n    const mockResponse = actionsHistory;\n\n    res.json(mockResponse);\n  });\n\n  //header\n  api.get(\"/notification-rules\", (req, res) => {\n    const mockResponse = notifRulesResp;\n\n    res.status(200).json(mockResponse);\n  });\n\n\n  api.post(\"/notification-rules\", (req,res) => {\n    console.log(req.body)\n    const index = notifRulesResp.content.findIndex(rule => rule.id == req.body.id);\n    if(index > -1) {\n      notifRulesResp.content[index] = req.body;\n    } else {\n      notifRulesResp.content.push(req.body);\n    }\n    console.log(JSON.stringify(notifRulesResp,null,4))\n    res.status(200).json(notifRulesResp);\n  })\n\n  api.delete(\"/notification-rules/:id\", (req,res) => {\n    const idToDelete = req.params.id;\n    notifRulesResp.content = notifRulesResp.content.filter(rule => rule.id != idToDelete);\n    res.status(200).json(notifRulesResp);\n  })\n\n  \n\n  return api;\n};\n"]}