{"version":3,"sources":["../../src/chantier_num_Api/index.js"],"names":["requests","require","requestsToProcess","authorizations","hashCode","s","split","reduce","a","b","charCodeAt","config","db","api","use","get","req","res","mockResponse","content","results","json","console","log","post","errors","body","status","lastActionDate","Date","push","comment","action","query","request","find","requestId","params","id","reqToProcessTmp","filter","length"],"mappings":"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","file":"index.js","sourcesContent":["import { version } from \"../../package.json\";\nimport { Router } from \"express\";\nimport facets from \"./facets\";\n\nconst requests = require('./responses/requests.json')\nconst requestsToProcess = require('./responses/requestsToProcess.json')\n\nconst authorizations = require('./responses/authorizations.json')\n\nconst hashCode = function(s){\n  return s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);              \n}\n\nexport default ({ config, db }) => {\n  let api = Router();\n\n  // mount the facets resource\n  api.use(\"/facets\", facets({ config, db }));\n\n  //header\n  api.get(\"/user/requests\", (req, res) => {\n    const mockResponse = {\n      content: {\n            results: requests\n         }\n      };\n\n    res.json(mockResponse);\n  });\n\n    api.get(\"/requests/task-list\", (req, res) => {\n    const mockResponse = {\n      content: {\n            results: requestsToProcess\n         }\n      };\n      console.log(requestsToProcess)\n\n    res.json(mockResponse);\n  });\n\n  api.get(\"/authorizations\", (req, res) => {\n    const mockResponse = {\n      content: {\n            results: authorizations\n         }\n      };\n\n    res.json(mockResponse);\n  });\n\n\n  api.post(\"/requests\", (req, res) => {\n    const mockResponse = {content:[], errors:[]};\n      req.body.status = 'OPEN'\n      req.body.lastActionDate = new Date();\n      requests.push(req.body)\n\n    res.json(mockResponse);\n  });\n\n  api.post(\"/requests/:id/action\", (req, res) => {\n    const comment = req.body.comment;\n    console.log('comment : ' + comment)\n    const action = req.query.action\n    const request = requestsToProcess.find(request => request.requestId === req.params.id) ;\n    console.log(req.query)\n    let reqToProcessTmp;\n    switch(action){\n      case 'approve':\n        reqToProcessTmp = requestsToProcess.filter(request => request.requestId !== req.params.id)\n        requestsToProcess.length = 0;\n        requestsToProcess.push(...reqToProcessTmp)\n      \n        \n        request.status = 'VERIFIED';\n        request.comment = comment;\n        requests.push(request);\n        break;\n      case 'reject':\n        reqToProcessTmp = requestsToProcess.filter(request => request.requestId !== req.params.id)\n        requestsToProcess.length = 0;\n        requestsToProcess.push(...reqToProcessTmp)\n      \n        \n        request.status = 'REJECTED';\n        request.comment = comment;\n        requests.push(request);\n        break;\n      case 'complementary-info':\n        reqToProcessTmp = requestsToProcess.filter(request => request.requestId !== req.params.id)\n        requestsToProcess.length = 0;\n        requestsToProcess.push(...reqToProcessTmp)\n      \n        \n        request.status = 'COMPLEMENTARY_INFO';\n        request.comment = comment;\n        requests.push(request);\n        break;\n      default:\n        console.log('action non reconnue')\n    }\n    const mockResponse = {content:[], errors:[]};\n    \n    res.json(mockResponse);\n  });\n\n  api.get(\"/users/current/roles\", (req, res) => {\n    const mockResponse = {\n        content:  \"ROLE_TECHNICAL_MANAGER\"\n      };\n\n    res.json(mockResponse);\n  });\n\n  // //header\n  // api.get(\"/notification-rules\", (req, res) => {\n  //   const mockResponse = notifRulesResp;\n\n  //   res.status(200).json(mockResponse);\n  // });\n\n\n  // api.post(\"/notification-rules\", (req,res) => {\n  //   console.log(req.body)\n  //   const index = notifRulesResp.content.findIndex(rule => rule.id == req.body.id);\n  //   if(index > -1) {\n  //     notifRulesResp.content[index] = req.body;\n  //   } else {\n  //     notifRulesResp.content.push(req.body);\n  //   }\n  //   console.log(JSON.stringify(notifRulesResp,null,4))\n  //   res.status(200).json(notifRulesResp);\n  // })\n\n  // api.delete(\"/notification-rules/:id\", (req,res) => {\n  //   const idToDelete = req.params.id;\n  //   notifRulesResp.content = notifRulesResp.content.filter(rule => rule.id != idToDelete);\n  //   res.status(200).json(notifRulesResp);\n  // })\n\n  \n\n  return api;\n};\n"]}